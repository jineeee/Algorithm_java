package practice;

import java.util.Stack;

/*
 * 0 0 0 0 0 b[0][n]
 * 0 0 1 0 3 b[1][n]
 * 0 2 5 0 1 b[2][n]
 * 4 2 4 4 2 b[3][n]
 * 3 5 1 3 1 b[4][n]
 */
public class Kakao1 {
	static int[][] b = {{0,0,0,0,0},{0,0,1,0,3},{0,2,5,0,1},{4,2,4,4,2},{3,5,1,3,1}}; 
	static int[] m = {1,5,3,5,1,2,1,4};
	static Stack<Integer> basket = new Stack<Integer>();
	static int count;
	
	static public void checkBasket(int curDoll) {
		if(basket.isEmpty()) { // basket이 빈 경우 (빈 stack은 peek() 실행 불가)
			basket.push(curDoll);
		} else if(basket.peek() == curDoll) { // 최근 들어간 인형과 현재 인형이 같은 경우
			basket.pop();
			count++;
		} else { // 최근 들어간 인형이 현재 인형과 다른 경우
			basket.push(curDoll);
		}
	}
	
	static public int solution(int[][] board, int[] moves) {
		int answer = 0;

		for(int i=0; i<moves.length; i++){
			int crane = moves[i]-1;
			for(int j=0; j<board.length; j++) {
				int doll = board[j][crane];
				
				if(doll == 0) continue; // 인형이 없는 곳에서 크레인을 작동시킨 경우
				checkBasket(doll);	
			}
		}
		answer = count*2;
		return answer;
	}
	
	public static void main(String[] args) {
		System.out.print(solution(b, m));
	}
}
